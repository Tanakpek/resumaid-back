generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applicants {
  email                                                              String            @unique(map: "email")
  id                                                                 String            @id @unique(map: "id")
  stripe_id                                                          String            @unique(map: "unique_client_id")
  subscription                                                       String?
  trial_used                                                         Boolean           @default(false)
  default_payment_method                                             String?
  subscriptions_applicants_subscriptionTosubscriptions               subscriptions?    @relation("applicants_subscriptionTosubscriptions", fields: [subscription], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "applicant_sub_fkey")
  payment_methods_applicants_default_payment_methodTopayment_methods payment_methods?  @relation("applicants_default_payment_methodTopayment_methods", fields: [default_payment_method], references: [stripe_id], onDelete: NoAction, onUpdate: NoAction, map: "pm_fkey")
  applications                                                       applications[]
  payment_methods_payment_methods_customerToapplicants               payment_methods[] @relation("payment_methods_customerToapplicants")
  runs                                                               runs[]
  subscriptions_subscriptions_applicant_stripe_idToapplicants        subscriptions[]   @relation("subscriptions_applicant_stripe_idToapplicants")
}

model job_boards {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  root_url String
  logo_url String?
  jobs     jobs[]
}

model job_scraping_pages {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path_url     String
  job_board    String  @db.Uuid
  instructions Json?   @db.Json
  job_id_param String?
}

model payment_methods {
  stripe_id                                                     String       @id
  customer                                                      String
  last_4                                                        Int?
  type                                                          String
  card_brand                                                    String?
  applicants_applicants_default_payment_methodTopayment_methods applicants[] @relation("applicants_default_payment_methodTopayment_methods")
  applicants_payment_methods_customerToapplicants               applicants   @relation("payment_methods_customerToapplicants", fields: [customer], references: [stripe_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_method_customer_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model prices {
  id                                      String          @id
  type                                    String
  unit_price_cents                        Float
  internal_description                    String?
  active                                  Boolean
  product                                 String
  trial_description                       String?
  billing_interval                        String?
  products_prices_productToproducts       products        @relation("prices_productToproducts", fields: [product], references: [stripe_id], onDelete: NoAction, onUpdate: NoAction, map: "price_product_fkey")
  products_products_default_priceToprices products[]      @relation("products_default_priceToprices")
  subscriptions                           subscriptions[]
}

model products {
  name                                  String   @id(map: "memberships_pkey")
  cv_gen                                Boolean
  cover_letter_gen                      Boolean
  stripe_id                             String?  @unique(map: "stripe_id_unique")
  default_price                         String?
  prices_prices_productToproducts       prices[] @relation("prices_productToproducts")
  prices_products_default_priceToprices prices?  @relation("products_default_priceToprices", fields: [default_price], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_pice")
}

model subscriptions {
  id                                                       String       @id(map: "entitlements_pkey")
  applicant_stripe_id                                      String
  product                                                  String
  creation_dt                                              DateTime     @default(now()) @db.Timestamp(6)
  status                                                   String
  current_period_start                                     DateTime     @db.Timestamp(6)
  current_period_end                                       DateTime     @db.Timestamp(6)
  price                                                    String
  applicants_applicants_subscriptionTosubscriptions        applicants[] @relation("applicants_subscriptionTosubscriptions")
  applicants_subscriptions_applicant_stripe_idToapplicants applicants   @relation("subscriptions_applicant_stripe_idToapplicants", fields: [applicant_stripe_id], references: [stripe_id], onDelete: NoAction, onUpdate: NoAction, map: "customer stripe id fkey")
  prices                                                   prices       @relation(fields: [price], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "price stripe id fkey")
}

model jobs {
  id             String         @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_board      String         @db.Uuid
  title          String?
  recruiter_name String?
  company        String?
  unique_id      String         @id
  icon_url       String?
  dt_created     DateTime       @default(now()) @db.Time(6)
  active         Boolean?
  applications   applications[]
  job_boards     job_boards     @relation(fields: [job_board], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model runs {
  id             String       @id(map: "applications_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dt             DateTime     @default(now()) @db.Timestamp(6)
  job_board      String       @db.Uuid
  application    String
  recruiter_name String?
  applicant      String
  type           String
  input_tokens   Int?
  output_tokens  Int?
  success        Boolean
  s3_url         String?
  applicants     applicants   @relation(fields: [applicant], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "application_applicant_fkey")
  applications   applications @relation(fields: [application], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([dt], map: "ts_index_dt")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model applications {
  applicant      String
  creation_dt    DateTime?  @default(now()) @db.Timetz(6)
  last_update_dt DateTime?  @default(now()) @db.Timetz(6)
  status         String     @default("new")
  job            String
  id             String     @id(map: "applications_pkey1")
  applicants     applicants @relation(fields: [applicant], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "applicant_fkey")
  jobs           jobs       @relation(fields: [job], references: [unique_id], onDelete: NoAction, onUpdate: NoAction, map: "job_fkey")
  runs           runs[]

  @@index([job], map: "fki_job_fkey")
}
