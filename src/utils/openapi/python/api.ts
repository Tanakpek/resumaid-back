/* tslint:disable */
/* eslint-disable */
/**
 * Applicaid AI API
 * API for Applicaid AI
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CVCurateRequest
 */
export interface CVCurateRequest {
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'company': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'job_id': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'job_board': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'job_scraping_page': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'job_title': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'recruiter': string;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'special_instructions': string | null;
    /**
     * 
     * @type {RequestCVInfo}
     * @memberof CVCurateRequest
     */
    'cv': RequestCVInfo;
    /**
     * 
     * @type {string}
     * @memberof CVCurateRequest
     */
    'job': string;
}
/**
 * 
 * @export
 * @interface CoverLetterRequest
 */
export interface CoverLetterRequest {
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'job_id': string;
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'job_board': string;
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'job_scraping_page': string;
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'special_instructions': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'style': string | null;
    /**
     * 
     * @type {RequestCVInfo}
     * @memberof CoverLetterRequest
     */
    'cv': RequestCVInfo;
    /**
     * 
     * @type {string}
     * @memberof CoverLetterRequest
     */
    'job': string;
}
/**
 * 
 * @export
 * @interface Education
 */
export interface Education {
    /**
     * Institution from which the degree was obtaineda
     * @type {string}
     * @memberof Education
     */
    'institution': string;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'location': string | null;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'degree': string | null;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'dissertation': string | null;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'thesis': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Education
     */
    'dates': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'score': string | null;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'classification': string | null;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'gpa': string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface JobCV
 */
export interface JobCV {
    /**
     * Name of the applicant
     * @type {string}
     * @memberof JobCV
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof JobCV
     */
    'title': string | null;
    /**
     * education history of an applicant
     * @type {Array<Education>}
     * @memberof JobCV
     */
    'education': Array<Education>;
    /**
     * Achievements and awards of the applicant
     * @type {Array<string>}
     * @memberof JobCV
     */
    'achievements_and_awards': Array<string>;
    /**
     * Description of the applicant
     * @type {string}
     * @memberof JobCV
     */
    'description': string;
    /**
     * Projects of the applicant keyed by project name
     * @type {{ [key: string]: Project; }}
     * @memberof JobCV
     */
    'projects': { [key: string]: Project; };
    /**
     * Volunteer experience of the applicant keyed by position at organization
     * @type {Array<Volunteer>}
     * @memberof JobCV
     */
    'volunteer': Array<Volunteer>;
    /**
     * Roles of the applicant keyed by company name to roles in the company
     * @type {{ [key: string]: Array<WorkExperience>; }}
     * @memberof JobCV
     */
    'work': { [key: string]: Array<WorkExperience>; };
    /**
     * Skills of the applicant
     * @type {Array<string>}
     * @memberof JobCV
     */
    'skills': Array<string>;
    /**
     * Languages spoken by the applicant
     * @type {Array<string>}
     * @memberof JobCV
     */
    'languages': Array<string>;
    /**
     * Professional certifications of the applicant
     * @type {Array<string>}
     * @memberof JobCV
     */
    'professional_certifications': Array<string>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {Array<Takeaway>}
     * @memberof Project
     */
    'takeaways': Array<Takeaway>;
}
/**
 * 
 * @export
 * @interface RequestAchievement
 */
export interface RequestAchievement {
    /**
     * 
     * @type {boolean}
     * @memberof RequestAchievement
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestAchievement
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof RequestAchievement
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface RequestCVInfo
 */
export interface RequestCVInfo {
    /**
     * 
     * @type {string}
     * @memberof RequestCVInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RequestCVInfo
     */
    'title': string;
    /**
     * 
     * @type {Array<RequestEducation>}
     * @memberof RequestCVInfo
     */
    'education': Array<RequestEducation>;
    /**
     * 
     * @type {Array<RequestAchievement>}
     * @memberof RequestCVInfo
     */
    'achievements_and_awards': Array<RequestAchievement>;
    /**
     * 
     * @type {string}
     * @memberof RequestCVInfo
     */
    'description': string;
    /**
     * 
     * @type {{ [key: string]: RequestProject; }}
     * @memberof RequestCVInfo
     */
    'projects': { [key: string]: RequestProject; };
    /**
     * 
     * @type {Array<RequestVolunteer>}
     * @memberof RequestCVInfo
     */
    'volunteer': Array<RequestVolunteer>;
    /**
     * 
     * @type {{ [key: string]: Array<RequestWorkExperience>; }}
     * @memberof RequestCVInfo
     */
    'work': { [key: string]: Array<RequestWorkExperience>; };
    /**
     * 
     * @type {Array<RequestSkill>}
     * @memberof RequestCVInfo
     */
    'skills': Array<RequestSkill>;
    /**
     * 
     * @type {Array<RequestLanguage>}
     * @memberof RequestCVInfo
     */
    'languages': Array<RequestLanguage>;
    /**
     * 
     * @type {Array<RequestCertification>}
     * @memberof RequestCVInfo
     */
    'professional_certifications': Array<RequestCertification>;
    /**
     * 
     * @type {string}
     * @memberof RequestCVInfo
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface RequestCertification
 */
export interface RequestCertification {
    /**
     * 
     * @type {boolean}
     * @memberof RequestCertification
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestCertification
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof RequestCertification
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface RequestEducation
 */
export interface RequestEducation {
    /**
     * Institution from which the degree was obtaineda
     * @type {string}
     * @memberof RequestEducation
     */
    'institution': string;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'location': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'degree': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'dissertation': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'thesis': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestEducation
     */
    'dates': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'score': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'classification': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    'gpa': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestEducation
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface RequestLanguage
 */
export interface RequestLanguage {
    /**
     * 
     * @type {boolean}
     * @memberof RequestLanguage
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestLanguage
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof RequestLanguage
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface RequestProject
 */
export interface RequestProject {
    /**
     * 
     * @type {Array<RequestTakeaway>}
     * @memberof RequestProject
     */
    'takeaways': Array<RequestTakeaway>;
    /**
     * 
     * @type {boolean}
     * @memberof RequestProject
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestProject
     */
    '_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestProject
     */
    'on': boolean;
}
/**
 * 
 * @export
 * @interface RequestSkill
 */
export interface RequestSkill {
    /**
     * 
     * @type {boolean}
     * @memberof RequestSkill
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestSkill
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof RequestSkill
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface RequestTakeaway
 */
export interface RequestTakeaway {
    /**
     * 
     * @type {boolean}
     * @memberof RequestTakeaway
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestTakeaway
     */
    'value': string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestTakeaway
     */
    'sel': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestTakeaway
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface RequestVolunteer
 */
export interface RequestVolunteer {
    /**
     * 
     * @type {string}
     * @memberof RequestVolunteer
     */
    'organization_name': string;
    /**
     * 
     * @type {string}
     * @memberof RequestVolunteer
     */
    'role': string;
    /**
     * 
     * @type {Array<RequestTakeaway>}
     * @memberof RequestVolunteer
     */
    'takeaways': Array<RequestTakeaway>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestVolunteer
     */
    'dates': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof RequestVolunteer
     */
    'immutable': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestVolunteer
     */
    '_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestVolunteer
     */
    'on': boolean;
}
/**
 * 
 * @export
 * @interface RequestWorkExperience
 */
export interface RequestWorkExperience {
    /**
     * 
     * @type {string}
     * @memberof RequestWorkExperience
     */
    'role': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestWorkExperience
     */
    'dates': Array<string>;
    /**
     * 
     * @type {Array<RequestTakeaway>}
     * @memberof RequestWorkExperience
     */
    'takeaways': Array<RequestTakeaway>;
    /**
     * 
     * @type {boolean}
     * @memberof RequestWorkExperience
     */
    'immutable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RequestWorkExperience
     */
    'on': boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestWorkExperience
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface Takeaway
 */
export interface Takeaway {
    /**
     * 
     * @type {string}
     * @memberof Takeaway
     */
    'desc': string;
    /**
     * 
     * @type {number}
     * @memberof Takeaway
     */
    'rank': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface Volunteer
 */
export interface Volunteer {
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    'organization_name': string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    'role': string;
    /**
     * 
     * @type {Array<Takeaway>}
     * @memberof Volunteer
     */
    'takeaways': Array<Takeaway>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Volunteer
     */
    'dates': Array<string>;
}
/**
 * 
 * @export
 * @interface WorkExperience
 */
export interface WorkExperience {
    /**
     * 
     * @type {string}
     * @memberof WorkExperience
     */
    'role': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkExperience
     */
    'dates': Array<string>;
    /**
     * 
     * @type {Array<Takeaway>}
     * @memberof WorkExperience
     */
    'takeaways': Array<Takeaway>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assistant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assistantApiV1GenerateAssistantPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/generate/assistant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cover Letter
         * @param {CoverLetterRequest} coverLetterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coverLetterApiV1GenerateCoverLetterPost: async (coverLetterRequest: CoverLetterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coverLetterRequest' is not null or undefined
            assertParamExists('coverLetterApiV1GenerateCoverLetterPost', 'coverLetterRequest', coverLetterRequest)
            const localVarPath = `/api/v1/generate/cover_letter/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coverLetterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cv Curate
         * @param {CVCurateRequest} cVCurateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cvCurateApiV1GenerateCvCuratePost: async (cVCurateRequest: CVCurateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cVCurateRequest' is not null or undefined
            assertParamExists('cvCurateApiV1GenerateCvCuratePost', 'cVCurateRequest', cVCurateRequest)
            const localVarPath = `/api/v1/generate/cv/curate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cVCurateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Assistant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assistantApiV1GenerateAssistantPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assistantApiV1GenerateAssistantPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.assistantApiV1GenerateAssistantPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cover Letter
         * @param {CoverLetterRequest} coverLetterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coverLetterApiV1GenerateCoverLetterPost(coverLetterRequest: CoverLetterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coverLetterApiV1GenerateCoverLetterPost(coverLetterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.coverLetterApiV1GenerateCoverLetterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cv Curate
         * @param {CVCurateRequest} cVCurateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cvCurateApiV1GenerateCvCuratePost(cVCurateRequest: CVCurateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCV>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cvCurateApiV1GenerateCvCuratePost(cVCurateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.cvCurateApiV1GenerateCvCuratePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Assistant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assistantApiV1GenerateAssistantPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.assistantApiV1GenerateAssistantPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cover Letter
         * @param {CoverLetterRequest} coverLetterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coverLetterApiV1GenerateCoverLetterPost(coverLetterRequest: CoverLetterRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.coverLetterApiV1GenerateCoverLetterPost(coverLetterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cv Curate
         * @param {CVCurateRequest} cVCurateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cvCurateApiV1GenerateCvCuratePost(cVCurateRequest: CVCurateRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobCV> {
            return localVarFp.cvCurateApiV1GenerateCvCuratePost(cVCurateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Assistant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assistantApiV1GenerateAssistantPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assistantApiV1GenerateAssistantPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cover Letter
     * @param {CoverLetterRequest} coverLetterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public coverLetterApiV1GenerateCoverLetterPost(coverLetterRequest: CoverLetterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).coverLetterApiV1GenerateCoverLetterPost(coverLetterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cv Curate
     * @param {CVCurateRequest} cVCurateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cvCurateApiV1GenerateCvCuratePost(cVCurateRequest: CVCurateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cvCurateApiV1GenerateCvCuratePost(cVCurateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



